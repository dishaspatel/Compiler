var path = Npm.require('path');
var fs = Npm.require('fs');
var mkdirp = Npm.require('mkdirp');
var echo = Npm.require('node-echo');
var beautify = Npm.require('js-beautify');

var extDir = path.resolve('./packages/mwc-compiler');
var packageJsPath = path.resolve(extDir, 'package.js');
var indexJsPath = path.resolve(extDir, 'compiler.js');


if(canProceed() && !fs.existsSync(extDir)) {
  console.log("=> Creating local mwc compiler package");

  // create new mwc extensions directory
  mkdirp.sync(extDir);
  // add package files
  fs.writeFileSync(indexJsPath, getContent(_indexJsContent));
  fs.writeFileSync(packageJsPath, getContent(_packageJsContent));

  // add new container as a package
  var meteorPackages = fs.readFileSync(path.resolve('.meteor/packages'), 'utf8');

  echo.sync("\nmwc-compiler", ">>", ".meteor/packages");
  console.log();
  console.log("-> mwc extensions support has been initialized.\nRestart your app")
  console.log();
  // if there is no mwc-extensions when running `meteor`
  // we need to kill the current running process, otherwise
  // mwc:extensions from the root meteor directory will be taken as default. ie the plugin
  process.exit(0);


}

// check whether is this `meteor test-packages` or not
function canProceed() {
  var unAcceptableCommands = {'test-packages': 1, 'publish': 1};
  if(process.argv.length > 2) {
    var command = process.argv[2];
    if(unAcceptableCommands[command]) {
      return false;
    }
  }

  return true;
}

function getContent(func) {
  var lines = func.toString().split('\n');
  // Drop the function declaration and closing bracket
  var onlyBody = lines.slice(1, lines.length -1);
  // Drop line number comments generated by Meteor, trim whitespace, make string
  onlyBody = _.map(onlyBody, function(line) {
    return line.slice(0, line.lastIndexOf("//")).trim();
  }).join('\n');
  // Make it look normal
  return beautify(onlyBody, { indent_size: 2 });
}

function _indexJsContent() {

  Plugin.registerCompiler({
    extensions: ["mwc.json"],
    filenames: []
  }, function() {
    var compiler = new MWC_Compiler();

    return compiler;
  });

}



function _packageJsContent () {

  var fs = Npm.require('fs');
  var path = Npm.require('path');
  var _ = Npm.require('underscore');
  Package.describe({
    documentation: 'README.md',
    git: "https://github.com/meteorwebcomponents/compiler.git",
    name: "mwc-compiler",
    summary: "Use polymer as the default templating engine instead of blaze.",
    version: "1.0.1"
  });

  function deps(api) {


    var d = ["underscore","mwc:compiler","mwc:extensions"];
    var mwcFilePath = path.resolve('client/compiler.mwc.json');
    if (mwcFilePath) {
      var mwcFile = JSON.parse(fs.readFileSync(mwcFilePath, 'utf8'));
      var extensions = _.keys(_.omit(mwcFile.extensions, ['log', "logFile"]));
      extensions.forEach(function(ext) {
        d.push(ext)
      });
    }
    return d;
  }
  Package.on_use(function(api) {
    api.use("underscore", "server");
    api.use("isobuild:compiler-plugin@1.0.0");
    api.versionsFrom("1.0");
  });

  Npm.depends({
    "mkdirp": "0.5.1",
    'node-echo': '0.1.1'
  });

  Package.registerBuildPlugin({
    name: 'compile-ext',
    use: deps(),
    sources: ['compiler.js'],
    npmDependencies:{
      "chokidar": "1.2.0"
    }
  });


}
